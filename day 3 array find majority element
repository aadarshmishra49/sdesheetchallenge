problem - majority element
link -https://leetcode.com/problems/majority-element/
code-
#include <bits/stdc++.h> 
int findMajorityElement(int arr[], int n) {
	// Write your code here.
            unordered_map<int,int>  count;
          for(int i=0;i<n;i++)
               count[arr[i]]++;
         int ans;
        for(auto x:count)
        {
            if(x.second>n/2)
               return x.first;
        }

         return -1; 
        
}

Time Complexity: O(N)-> Frequency array or O(N log N) -> HashMap 

Space Complexity: O(N)

Solution 2 (Optimal):

Mooreâ€™s Voting Algorithm

code--

#include <bits/stdc++.h> 
int findMajorityElement(int arr[], int n) {
	// Write your code here.
    int count=0;
    int element=0;
    for(int i=0;i<n;i++){
        if(count==0)
            element=arr[i];
        if(arr[i]==element)
            count ++;
        else
            count--;
    }
    count = 0;

   for(int i = 0; i < n; i++){
      if(arr[i] == element)  
        count++;
   }

   

   if(count > n / 2)  
        return element;
    return -1;
    
}

Time Complexity: O(N)

Space Complexity: O(1)

