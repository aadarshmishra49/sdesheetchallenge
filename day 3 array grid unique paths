problem - grid uniquw paths 
link -- https://leetcode.com/problems/unique-paths/

code -- recursive 

class Solution {
public:
    int countpaths(int i,int j,int m,int n){
        if(i==m-1 || j==n-1) return 1;
        if(i>=m || j>=n)  return 0;
        else
             return countpaths(i+1,j,m,n)+countpaths(i,j+1,m,n);
        
        
    }
    int uniquePaths(int m, int n) {
        return countpaths(0,0,m,n);
        
    }
};

Time Complexity: The time comp[lexity of this recursive solution is exponential.

Space Complexity: As we are using stack space for recursion so the space complexity will also be exponential.


Solution 2: Combinatorics Solution

code --
#include <bits/stdc++.h> 
int uniquePaths(int m, int n) {

    int N=m+n-2;
    int r=m-1;
     double res=1;
    for(int i=1;i<=r;i++){
        
        res =res *(N-r+i)/i;
    }
    return (int)res;
    
}
Tme complexity : O(n-1) or  O(m-1) depending on the formula we are using.

Space Complexity: As we are not using any extra space the space complexity of the solution will be  O(1).



