problem - majority element 2
link -- https://leetcode.com/problems/majority-element-ii/

code --
 #include <bits/stdc++.h> 
vector<int> majorityElementII(vector<int> &arr)
{
   
    int n=arr.size();
    vector<int> ans;
    unordered_map<int,int> m;
    for(int i=0;i<n;i++)
        m[arr[i]]++;
    for(auto x:m){
        if(x.second>n/3)
            ans.push_back(x.first);
    }
    return ans;

}

Time Complexity: O(n)

Space Complexity: O(n)


solution 2 --  Optimal Solution (Extended Boyer Mooreâ€™s Voting Algorithm)

code --

#include <bits/stdc++.h> 
vector<int> majorityElementII(vector<int> &arr)
{
    // Write your code here.
    
            int count1=0,count2=0,num1=-1,num2=0;
        int n=arr.size();
        for(int i=0;i<n;i++){
            if(num1==arr[i])
                count1++;
            else if(num2==arr[i])
                  count2++;
            else if(count2==0){
                num2=arr[i];
                count2=1;
            }
            else if(count1==0){
                num1=arr[i];
                count1=1;
            }
            else{
                count1--;
                count2--;
            }
    }
        
        vector<int> ans;
        int c1=0,c2=0;
        for(int i=0;i<n;i++){
            
            if(num1==arr[i])
                c1++;
            if(num2==arr[i])
                c2++;
            
            
        }
        if(c1>n/3)
            ans.push_back(num1);
        if(c2>n/3)
            ans.push_back(num2);
       
        return ans;


}


Time Complexity: O(n)

Space Complexity: O(1)


