problem - Longest Consecutive Sequence

link -- https://leetcode.com/problems/longest-consecutive-sequence/

code -- optimal sol
  
  class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
               if(nums.size()==0)return 0;
        map<int,int>mp;
        int ans=0;
        for(auto c:nums)mp[c]++;
        for(auto m:mp){
            if(mp[m.first-1]!=0)continue;
            int count=0;
            int i=m.first;
            while(mp[i]>0){
                count++;
                i++;
            }
            ans=max(count,ans);
        }
        return ans;
     
    }
};

Time Complexity: The time complexity of the above approach is O(N) because we traverse each consecutive subsequence only once.
Space Complexity: The space complexity of the above approach is O(N) because we are maintaining a map


code -- using sorting and linear search


class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
             if(nums.size() == 0 ){
            return 0;
        }
        
        sort(nums.begin(),nums.end());
        
        int ans = 1;
        int prev = nums[0];
        int cur = 1;
        
        for(int i = 1;i < nums.size();i++){
            if(nums[i] == prev+1){
                cur++;
            }
            else if(nums[i] != prev){
                cur = 1;
            }
            prev = nums[i];
            ans = max(ans, cur);
        }
        return ans;
        
        
    }
};

Time Complexity: We are first sorting the array which will take O(N * log(N)) time and then we are running a for loop which will take O(N) time. Hence, the overall time complexity will be O(N * log(N)).
Space Complexity: The space complexity for the above approach is O(1) because we are not using any auxiliary space

