problem - largest subarray with sum zero

link - https://practice.geeksforgeeks.org/problems/largest-subarray-with-0-sum/1


code - brute force

#include <bits/stdc++.h> 
int LongestSubsetWithZeroSum(vector < int > arr) {

  // Write your code here
    int n=arr.size();
        int  maxi = 0;
    for(int i = 0; i < n; ++i){
        int sum = 0;
        for(int j = i; j < n; ++j){
            sum += arr[j];
            if(sum == 0){
                maxi = max(maxi, j-i+1);
            }
        }
    }
    return maxi;


}

Time Complexity: O(N^2) as we have two loops for traversal

Space Complexity : O(1) as we arenâ€™t using any extra space.



code -- optimal sol


class Solution{
    public:
    int maxLen(vector<int>&A, int n)
    {   
        // Your code here
        int s=0,maxi=0;
        unordered_map<int,int> m;
        for(int i=0;i<n;i++){
            s += A[i];
            if(s==0)
              maxi=i+1;
            else{
                if(m.find(s)!=m.end())
                  maxi=max(maxi,i-m[s]);
                else
                   m[s]=i;
            }
        }
        return maxi;
    }
};

Time Complexity: O(N), as we are traversing the array only once

Space Complexity: O(N), in the worst case we would insert all array elements prefix sum into our hashmap
