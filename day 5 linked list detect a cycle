problem - detect a cycle 
link -- https://leetcode.com/problems/linked-list-cycle/

code -- using maps 

bool detectCycle(Node *head)
{
	//	Write your code here
    if(head==NULL) return false;
    Node* temp=head;
   map<Node*,bool> visited;
    while(temp!=NULL){
        if(visited[temp]==true)
            return true;
        visited[temp]=true;
        
       temp=temp->next; 
    }
    
    return false;
}
time and space = O(n)


using floyd's cycle  detection method

code --
class Solution {
public:
    bool hasCycle(ListNode *head) {
        if(head==NULL||head->next==NULL) return false;
        
        ListNode* slow=head;
        ListNode* fast=head;
        while(fast!=NULL && slow!=NULL){
            
            fast=fast->next;
            if(fast!=NULL)
                fast=fast->next;
            
            slow=slow->next;
            if(slow==fast) return true;
            
        }
        return false;
    }
};

time = O(n)
space =O(1)
